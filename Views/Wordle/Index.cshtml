@model FutArg11.Models.ViewModels.WordleViewModel

@section Head {
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
}

@{
    ViewData["Title"] = "FutArg Wordle";
    var maxIntentos = 6;
    var apellido = Model.ApellidoObjetivo;
    var letrasReales = apellido.Replace(" ", "");
    var maxCols = letrasReales.Length;
}

<div class="row">
    <div class="container wordle-container text-center">

        <div id="wordle-board" class="mb-4">
            @for (int i = 0; i < maxIntentos; i++)
            {
                <div class="d-flex justify-content-center mb-2">
                    @{
                        var colCount = 0;
                    }
                    @for (int j = 0; j < apellido.Length; j++)
                    {
                        if (apellido[j] == ' ')
                        {
                            <div class="wordle-cell empty-space"></div>
                        }
                        else
                        {
                            <div class="wordle-cell" data-row="@i" data-col="@colCount"></div>
                            colCount++;
                        }
                    }
                </div>
            }
        </div>

        <div id="virtual-keyboard"></div>

        <div id="end-game-buttons" style="display:none;" class="mb-3">
            <h3 id="end-message" class="mb-3"></h3>
            <button id="restart-btn" class="btn btn-success me-2">Volver a jugar</button>
            <button id="cancel-btn" class="btn btn-secondary">Cancelar</button>
        </div>

    </div>
</div>

@section Styles {
    <style>
        .wordle-cell {
            width: 60px;
            height: 60px;
            border: 2px solid #888;
            margin: 2px;
            font-size: 2em;
            font-weight: bold;
            text-transform: uppercase;
            display: flex;
            align-items: center;
            justify-content: center;
            user-select: none;
            box-sizing: border-box;
        }

            .wordle-cell.correct {
                background-color: green;
                color: white;
                border-color: green;
            }

            .wordle-cell.present {
                background-color: goldenrod;
                color: white;
                border-color: goldenrod;
            }

            .wordle-cell.absent {
                background-color: #888;
                color: white;
                border-color: #888;
            }

            .wordle-cell.empty-space {
                width: 60px;
                height: 60px;
                margin: 2px;
                border: none;
                background: transparent;
            }

        #virtual-keyboard {
            max-width: 350px; 
            margin: 0 auto; 
            justify-content: center; 
            display: flex;
            flex-wrap: wrap;
        }

        .vk-btn {
            width: 35px;
            height: 45px;
            margin: 1px;
            font-size: 1.2rem;
            text-transform: uppercase;
            font-weight: bold;
            border-radius: 5px;
            border: 1px solid #4dc3ff;
            background-color: #00111d;
            color: #e6f0fa;
            cursor: pointer;
            transition: all 0.2s ease;
        }

            .vk-btn:hover {
                background-color: #004080;
                border-color: #66d0ff;
                transform: scale(1.1);
            }

            .vk-btn.special {
                width: 80px;
                font-size: 1.2rem;
            }

            .vk-btn.correct {
                background-color: green !important;
                color: white;
                border-color: green;
            }

            .vk-btn.present {
                background-color: goldenrod !important;
                color: white;
                border-color: goldenrod;
            }

            .vk-btn.absent {
                background-color: #555 !important;
                color: white;
                border-color: #555;
            }
    </style>
}

@section Scripts {
    <script>
        const rows = @maxIntentos;
        const rawWord = "@apellido";
        const letrasReales = "@letrasReales".toUpperCase();
        const maxCols = letrasReales.length;

        let currentRow = 0;
        let currentCol = 0;

        const endButtons = document.getElementById('end-game-buttons');
        const endMessage = document.getElementById('end-message');
        const restartBtn = document.getElementById('restart-btn');
        const cancelBtn = document.getElementById('cancel-btn');
        const board = document.getElementById('wordle-board');
        const vkContainer = document.getElementById('virtual-keyboard');

        function getCell(row, col) { return board.querySelector(`.wordle-cell[data-row="${row}"][data-col="${col}"]`); }
        function setCell(row, col, letter) { const cell = getCell(row, col); if (!cell) return; cell.textContent = letter; cell.classList.remove('correct', 'present', 'absent'); }

        // Actualizar estado de fila completa
        function updateRowComplete() { return currentCol === maxCols; }

        // Crear teclado virtual
        const keysRows = ["QWERTYUIOP", "ASDFGHJKL", "ZXCVBNM"];
        keysRows.forEach(row => {
            const divRow = document.createElement('div');
            divRow.classList.add('d-flex', 'justify-content-center', 'mb-1');
            row.split('').forEach(ch => {
                const btn = document.createElement('button');
                btn.className = 'vk-btn';
                btn.textContent = ch;
                btn.addEventListener('click', () => handleKey(ch));
                divRow.appendChild(btn);
            });
            vkContainer.appendChild(divRow);
        });

        // Fila de Backspace + Enter
        const divSpecial = document.createElement('div');
        divSpecial.classList.add('d-flex', 'justify-content-center', 'mb-1');
        const backBtn = document.createElement('button');
        backBtn.className = 'vk-btn special';
        backBtn.textContent = 'Back';
        backBtn.addEventListener('click', handleBackspace);
        const enterBtn = document.createElement('button');
        enterBtn.className = 'vk-btn special';
        enterBtn.textContent = 'Enter';
        enterBtn.addEventListener('click', submitWord);
        divSpecial.appendChild(backBtn);
        divSpecial.appendChild(enterBtn);
        vkContainer.appendChild(divSpecial);

        // Manejo de teclas virtuales
        function handleKey(ch) {
            if (currentCol < maxCols) {
                setCell(currentRow, currentCol, ch);
                currentCol++;
            }
        }

        function handleBackspace() {
            if (currentCol > 0) {
                currentCol--;
                setCell(currentRow, currentCol, "");
            }
        }

        function submitWord() {
            if (!updateRowComplete()) return;
            const attemptArr = [];
            for (let i = 0; i < maxCols; i++) {
                const cell = getCell(currentRow, i);
                if (!cell) return;
                attemptArr.push(cell.textContent.toUpperCase());
            }
            const targetArr = letrasReales.split("");
            const checked = Array(targetArr.length).fill(false);

            // Correct
            for (let i = 0; i < maxCols; i++) {
                if (attemptArr[i] === targetArr[i]) {
                    getCell(currentRow, i).classList.add('correct');
                    updateKeyboardColors(attemptArr[i], 'correct');
                    checked[i] = true;
                }
            }
            // Present/Absent
            for (let i = 0; i < maxCols; i++) {
                const cell = getCell(currentRow, i);
                if (cell.classList.contains('correct')) continue;
                const idx = targetArr.findIndex((ch, j) => !checked[j] && ch === attemptArr[i]);
                if (idx !== -1) { cell.classList.add('present'); updateKeyboardColors(attemptArr[i], 'present'); checked[idx] = true; }
                else { cell.classList.add('absent'); updateKeyboardColors(attemptArr[i], 'absent'); }
            }

            if (attemptArr.join("") === letrasReales) {
                endMessage.textContent = `¡Ganaste! Respuesta: ${rawWord}`;
                finishGame(true);
                return;
            }

            currentRow++; currentCol = 0;
            if (currentRow >= rows) {
                endMessage.textContent = `Perdiste. La respuesta era: ${rawWord}`;
                finishGame(false);
            }
        }

        function finishGame(win) {
            endButtons.style.display = 'block';

            const vkContainer = document.getElementById('virtual-keyboard');
            vkContainer.style.display = 'none';

            const rect = board.getBoundingClientRect();
            board.innerHTML = "";
            const img = document.createElement("img");
            img.src = win ? "/images/wordle/ganador.jpg" : "/images/wordle/perdedor.jpg";
            img.style.width = rect.width + "px";
            img.style.height = rect.height + "px";
            img.style.objectFit = "cover";
            img.style.display = "block";
            img.style.margin = "0 auto";
            board.appendChild(img);
        }

        restartBtn.addEventListener('click', () => window.location.href = '@Url.Action("Index", "Wordle")');
        cancelBtn.addEventListener('click', () => window.location.href = '@Url.Action("Index", "Home")');

        // Soporte teclado físico desktop
        document.addEventListener('keydown', (e) => {
            if (currentRow >= rows) return;
            const key = e.key.toUpperCase();
            if (key === 'BACKSPACE') handleBackspace();
            else if (key === 'ENTER') submitWord();
            else if (/^[A-Z]$/.test(key)) handleKey(key);
        });

        function updateKeyboardColors(letter, state) {
            const btn = Array.from(vkContainer.querySelectorAll('.vk-btn'))
                .find(b => b.textContent === letter);

            if (!btn) return;

            // Si ya estaba en "correct", no lo degradamos
            if (btn.classList.contains('correct')) return;

            if (state === 'correct') {
                btn.classList.remove('present', 'absent');
                btn.classList.add('correct');
            } else if (state === 'present') {
                // Si estaba como "absent", lo actualizamos a "present"
                if (!btn.classList.contains('present')) {
                    btn.classList.remove('absent');
                    btn.classList.add('present');
                }
            } else if (state === 'absent') {
                // Solo lo ponemos en absent si no estaba en present/correct
                if (!btn.classList.contains('present') && !btn.classList.contains('correct')) {
                    btn.classList.add('absent');
                }
            }
        }
    </script>
}
